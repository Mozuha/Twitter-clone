// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/tweet"
	"app/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Tweet is the model entity for the Tweet schema.
type Tweet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TweetQuery when eager-loading is set.
	Edges        TweetEdges `json:"edges"`
	tweet_parent *int
	user_tweets  *int
	selectValues sql.SelectValues
}

// TweetEdges holds the relations/edges for other nodes in the graph.
type TweetEdges struct {
	// PostedBy holds the value of the posted_by edge.
	PostedBy *User `json:"posted_by,omitempty"`
	// Child holds the value of the child edge.
	Child []*Tweet `json:"child,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Tweet `json:"parent,omitempty"`
	// LikedBy holds the value of the liked_by edge.
	LikedBy []*Like `json:"liked_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedChild   map[string][]*Tweet
	namedLikedBy map[string][]*Like
}

// PostedByOrErr returns the PostedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) PostedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.PostedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.PostedBy, nil
	}
	return nil, &NotLoadedError{edge: "posted_by"}
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) ChildOrErr() ([]*Tweet, error) {
	if e.loadedTypes[1] {
		return e.Child, nil
	}
	return nil, &NotLoadedError{edge: "child"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) ParentOrErr() (*Tweet, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tweet.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) LikedByOrErr() ([]*Like, error) {
	if e.loadedTypes[3] {
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "liked_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tweet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			values[i] = new(sql.NullInt64)
		case tweet.FieldText:
			values[i] = new(sql.NullString)
		case tweet.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case tweet.ForeignKeys[0]: // tweet_parent
			values[i] = new(sql.NullInt64)
		case tweet.ForeignKeys[1]: // user_tweets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tweet fields.
func (t *Tweet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tweet.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				t.Text = value.String
			}
		case tweet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tweet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tweet_parent", value)
			} else if value.Valid {
				t.tweet_parent = new(int)
				*t.tweet_parent = int(value.Int64)
			}
		case tweet.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_tweets", value)
			} else if value.Valid {
				t.user_tweets = new(int)
				*t.user_tweets = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tweet.
// This includes values selected through modifiers, order, etc.
func (t *Tweet) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryPostedBy queries the "posted_by" edge of the Tweet entity.
func (t *Tweet) QueryPostedBy() *UserQuery {
	return NewTweetClient(t.config).QueryPostedBy(t)
}

// QueryChild queries the "child" edge of the Tweet entity.
func (t *Tweet) QueryChild() *TweetQuery {
	return NewTweetClient(t.config).QueryChild(t)
}

// QueryParent queries the "parent" edge of the Tweet entity.
func (t *Tweet) QueryParent() *TweetQuery {
	return NewTweetClient(t.config).QueryParent(t)
}

// QueryLikedBy queries the "liked_by" edge of the Tweet entity.
func (t *Tweet) QueryLikedBy() *LikeQuery {
	return NewTweetClient(t.config).QueryLikedBy(t)
}

// Update returns a builder for updating this Tweet.
// Note that you need to call Tweet.Unwrap() before calling this method if this Tweet
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tweet) Update() *TweetUpdateOne {
	return NewTweetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tweet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tweet) Unwrap() *Tweet {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tweet is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tweet) String() string {
	var builder strings.Builder
	builder.WriteString("Tweet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("text=")
	builder.WriteString(t.Text)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChild returns the Child named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tweet) NamedChild(name string) ([]*Tweet, error) {
	if t.Edges.namedChild == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedChild[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tweet) appendNamedChild(name string, edges ...*Tweet) {
	if t.Edges.namedChild == nil {
		t.Edges.namedChild = make(map[string][]*Tweet)
	}
	if len(edges) == 0 {
		t.Edges.namedChild[name] = []*Tweet{}
	} else {
		t.Edges.namedChild[name] = append(t.Edges.namedChild[name], edges...)
	}
}

// NamedLikedBy returns the LikedBy named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tweet) NamedLikedBy(name string) ([]*Like, error) {
	if t.Edges.namedLikedBy == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedLikedBy[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tweet) appendNamedLikedBy(name string, edges ...*Like) {
	if t.Edges.namedLikedBy == nil {
		t.Edges.namedLikedBy = make(map[string][]*Like)
	}
	if len(edges) == 0 {
		t.Edges.namedLikedBy[name] = []*Like{}
	} else {
		t.Edges.namedLikedBy[name] = append(t.Edges.namedLikedBy[name], edges...)
	}
}

// Tweets is a parsable slice of Tweet.
type Tweets []*Tweet
