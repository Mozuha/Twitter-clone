// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/predicate"
	"app/ent/tweet"
	"app/ent/user"
	"errors"
	"fmt"
	"time"
)

// TweetWhereInput represents a where input for filtering Tweet queries.
type TweetWhereInput struct {
	Predicates []predicate.Tweet  `json:"-"`
	Not        *TweetWhereInput   `json:"not,omitempty"`
	Or         []*TweetWhereInput `json:"or,omitempty"`
	And        []*TweetWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "posted_by" edge predicates.
	HasPostedBy     *bool             `json:"hasPostedBy,omitempty"`
	HasPostedByWith []*UserWhereInput `json:"hasPostedByWith,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool              `json:"hasChildren,omitempty"`
	HasChildrenWith []*TweetWhereInput `json:"hasChildrenWith,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool              `json:"hasParent,omitempty"`
	HasParentWith []*TweetWhereInput `json:"hasParentWith,omitempty"`

	// "liked_by" edge predicates.
	HasLikedBy     *bool             `json:"hasLikedBy,omitempty"`
	HasLikedByWith []*UserWhereInput `json:"hasLikedByWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TweetWhereInput) AddPredicates(predicates ...predicate.Tweet) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TweetWhereInput filter on the TweetQuery builder.
func (i *TweetWhereInput) Filter(q *TweetQuery) (*TweetQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTweetWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTweetWhereInput is returned in case the TweetWhereInput is empty.
var ErrEmptyTweetWhereInput = errors.New("ent: empty predicate TweetWhereInput")

// P returns a predicate for filtering tweets.
// An error is returned if the input is empty or invalid.
func (i *TweetWhereInput) P() (predicate.Tweet, error) {
	var predicates []predicate.Tweet
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tweet.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tweet, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tweet.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tweet, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tweet.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tweet.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tweet.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tweet.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tweet.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tweet.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tweet.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tweet.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tweet.IDLTE(*i.IDLTE))
	}
	if i.Text != nil {
		predicates = append(predicates, tweet.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, tweet.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, tweet.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, tweet.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, tweet.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, tweet.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, tweet.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, tweet.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, tweet.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, tweet.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, tweet.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, tweet.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, tweet.TextContainsFold(*i.TextContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, tweet.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, tweet.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, tweet.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, tweet.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, tweet.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, tweet.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, tweet.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, tweet.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasPostedBy != nil {
		p := tweet.HasPostedBy()
		if !*i.HasPostedBy {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasPostedByWith))
		for _, w := range i.HasPostedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasPostedByWith(with...))
	}
	if i.HasChildren != nil {
		p := tweet.HasChildren()
		if !*i.HasChildren {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasChildrenWith(with...))
	}
	if i.HasParent != nil {
		p := tweet.HasParent()
		if !*i.HasParent {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasParentWith(with...))
	}
	if i.HasLikedBy != nil {
		p := tweet.HasLikedBy()
		if !*i.HasLikedBy {
			p = tweet.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasLikedByWith))
		for _, w := range i.HasLikedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tweet.HasLikedByWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTweetWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tweet.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "screen_name" field predicates.
	ScreenName             *string  `json:"screenName,omitempty"`
	ScreenNameNEQ          *string  `json:"screenNameNEQ,omitempty"`
	ScreenNameIn           []string `json:"screenNameIn,omitempty"`
	ScreenNameNotIn        []string `json:"screenNameNotIn,omitempty"`
	ScreenNameGT           *string  `json:"screenNameGT,omitempty"`
	ScreenNameGTE          *string  `json:"screenNameGTE,omitempty"`
	ScreenNameLT           *string  `json:"screenNameLT,omitempty"`
	ScreenNameLTE          *string  `json:"screenNameLTE,omitempty"`
	ScreenNameContains     *string  `json:"screenNameContains,omitempty"`
	ScreenNameHasPrefix    *string  `json:"screenNameHasPrefix,omitempty"`
	ScreenNameHasSuffix    *string  `json:"screenNameHasSuffix,omitempty"`
	ScreenNameEqualFold    *string  `json:"screenNameEqualFold,omitempty"`
	ScreenNameContainsFold *string  `json:"screenNameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "profile_image" field predicates.
	ProfileImage             *string  `json:"profileImage,omitempty"`
	ProfileImageNEQ          *string  `json:"profileImageNEQ,omitempty"`
	ProfileImageIn           []string `json:"profileImageIn,omitempty"`
	ProfileImageNotIn        []string `json:"profileImageNotIn,omitempty"`
	ProfileImageGT           *string  `json:"profileImageGT,omitempty"`
	ProfileImageGTE          *string  `json:"profileImageGTE,omitempty"`
	ProfileImageLT           *string  `json:"profileImageLT,omitempty"`
	ProfileImageLTE          *string  `json:"profileImageLTE,omitempty"`
	ProfileImageContains     *string  `json:"profileImageContains,omitempty"`
	ProfileImageHasPrefix    *string  `json:"profileImageHasPrefix,omitempty"`
	ProfileImageHasSuffix    *string  `json:"profileImageHasSuffix,omitempty"`
	ProfileImageEqualFold    *string  `json:"profileImageEqualFold,omitempty"`
	ProfileImageContainsFold *string  `json:"profileImageContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool              `json:"hasPosts,omitempty"`
	HasPostsWith []*TweetWhereInput `json:"hasPostsWith,omitempty"`

	// "followers" edge predicates.
	HasFollowers     *bool             `json:"hasFollowers,omitempty"`
	HasFollowersWith []*UserWhereInput `json:"hasFollowersWith,omitempty"`

	// "following" edge predicates.
	HasFollowing     *bool             `json:"hasFollowing,omitempty"`
	HasFollowingWith []*UserWhereInput `json:"hasFollowingWith,omitempty"`

	// "likes" edge predicates.
	HasLikes     *bool              `json:"hasLikes,omitempty"`
	HasLikesWith []*TweetWhereInput `json:"hasLikesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.ScreenName != nil {
		predicates = append(predicates, user.ScreenNameEQ(*i.ScreenName))
	}
	if i.ScreenNameNEQ != nil {
		predicates = append(predicates, user.ScreenNameNEQ(*i.ScreenNameNEQ))
	}
	if len(i.ScreenNameIn) > 0 {
		predicates = append(predicates, user.ScreenNameIn(i.ScreenNameIn...))
	}
	if len(i.ScreenNameNotIn) > 0 {
		predicates = append(predicates, user.ScreenNameNotIn(i.ScreenNameNotIn...))
	}
	if i.ScreenNameGT != nil {
		predicates = append(predicates, user.ScreenNameGT(*i.ScreenNameGT))
	}
	if i.ScreenNameGTE != nil {
		predicates = append(predicates, user.ScreenNameGTE(*i.ScreenNameGTE))
	}
	if i.ScreenNameLT != nil {
		predicates = append(predicates, user.ScreenNameLT(*i.ScreenNameLT))
	}
	if i.ScreenNameLTE != nil {
		predicates = append(predicates, user.ScreenNameLTE(*i.ScreenNameLTE))
	}
	if i.ScreenNameContains != nil {
		predicates = append(predicates, user.ScreenNameContains(*i.ScreenNameContains))
	}
	if i.ScreenNameHasPrefix != nil {
		predicates = append(predicates, user.ScreenNameHasPrefix(*i.ScreenNameHasPrefix))
	}
	if i.ScreenNameHasSuffix != nil {
		predicates = append(predicates, user.ScreenNameHasSuffix(*i.ScreenNameHasSuffix))
	}
	if i.ScreenNameEqualFold != nil {
		predicates = append(predicates, user.ScreenNameEqualFold(*i.ScreenNameEqualFold))
	}
	if i.ScreenNameContainsFold != nil {
		predicates = append(predicates, user.ScreenNameContainsFold(*i.ScreenNameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.ProfileImage != nil {
		predicates = append(predicates, user.ProfileImageEQ(*i.ProfileImage))
	}
	if i.ProfileImageNEQ != nil {
		predicates = append(predicates, user.ProfileImageNEQ(*i.ProfileImageNEQ))
	}
	if len(i.ProfileImageIn) > 0 {
		predicates = append(predicates, user.ProfileImageIn(i.ProfileImageIn...))
	}
	if len(i.ProfileImageNotIn) > 0 {
		predicates = append(predicates, user.ProfileImageNotIn(i.ProfileImageNotIn...))
	}
	if i.ProfileImageGT != nil {
		predicates = append(predicates, user.ProfileImageGT(*i.ProfileImageGT))
	}
	if i.ProfileImageGTE != nil {
		predicates = append(predicates, user.ProfileImageGTE(*i.ProfileImageGTE))
	}
	if i.ProfileImageLT != nil {
		predicates = append(predicates, user.ProfileImageLT(*i.ProfileImageLT))
	}
	if i.ProfileImageLTE != nil {
		predicates = append(predicates, user.ProfileImageLTE(*i.ProfileImageLTE))
	}
	if i.ProfileImageContains != nil {
		predicates = append(predicates, user.ProfileImageContains(*i.ProfileImageContains))
	}
	if i.ProfileImageHasPrefix != nil {
		predicates = append(predicates, user.ProfileImageHasPrefix(*i.ProfileImageHasPrefix))
	}
	if i.ProfileImageHasSuffix != nil {
		predicates = append(predicates, user.ProfileImageHasSuffix(*i.ProfileImageHasSuffix))
	}
	if i.ProfileImageEqualFold != nil {
		predicates = append(predicates, user.ProfileImageEqualFold(*i.ProfileImageEqualFold))
	}
	if i.ProfileImageContainsFold != nil {
		predicates = append(predicates, user.ProfileImageContainsFold(*i.ProfileImageContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasPosts != nil {
		p := user.HasPosts()
		if !*i.HasPosts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasPostsWith(with...))
	}
	if i.HasFollowers != nil {
		p := user.HasFollowers()
		if !*i.HasFollowers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowersWith))
		for _, w := range i.HasFollowersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowersWith(with...))
	}
	if i.HasFollowing != nil {
		p := user.HasFollowing()
		if !*i.HasFollowing {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFollowingWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFollowingWith))
		for _, w := range i.HasFollowingWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFollowingWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFollowingWith(with...))
	}
	if i.HasLikes != nil {
		p := user.HasLikes()
		if !*i.HasLikes {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLikesWith) > 0 {
		with := make([]predicate.Tweet, 0, len(i.HasLikesWith))
		for _, w := range i.HasLikesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLikesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasLikesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
