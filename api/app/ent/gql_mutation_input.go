// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateTweetInput represents a mutation input for creating tweets.
type CreateTweetInput struct {
	Text       string
	CreatedAt  *time.Time
	PostedByID int
	ChildIDs   []int
	ParentID   *int
	LikedByIDs []int
}

// Mutate applies the CreateTweetInput on the TweetMutation builder.
func (i *CreateTweetInput) Mutate(m *TweetMutation) {
	m.SetText(i.Text)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetPostedByID(i.PostedByID)
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.LikedByIDs; len(v) > 0 {
		m.AddLikedByIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTweetInput on the TweetCreate builder.
func (c *TweetCreate) SetInput(i CreateTweetInput) *TweetCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name         string
	ScreenName   string
	Email        string
	Password     string
	ProfileImage *string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	PostIDs      []int
	FollowerIDs  []int
	FollowingIDs []int
	LikeIDs      []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetScreenName(i.ScreenName)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.FollowerIDs; len(v) > 0 {
		m.AddFollowerIDs(v...)
	}
	if v := i.FollowingIDs; len(v) > 0 {
		m.AddFollowingIDs(v...)
	}
	if v := i.LikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name               *string
	ScreenName         *string
	Email              *string
	Password           *string
	ProfileImage       *string
	UpdatedAt          *time.Time
	ClearPosts         bool
	AddPostIDs         []int
	RemovePostIDs      []int
	ClearFollowers     bool
	AddFollowerIDs     []int
	RemoveFollowerIDs  []int
	ClearFollowing     bool
	AddFollowingIDs    []int
	RemoveFollowingIDs []int
	ClearLikes         bool
	AddLikeIDs         []int
	RemoveLikeIDs      []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ScreenName; v != nil {
		m.SetScreenName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.ProfileImage; v != nil {
		m.SetProfileImage(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if i.ClearFollowers {
		m.ClearFollowers()
	}
	if v := i.AddFollowerIDs; len(v) > 0 {
		m.AddFollowerIDs(v...)
	}
	if v := i.RemoveFollowerIDs; len(v) > 0 {
		m.RemoveFollowerIDs(v...)
	}
	if i.ClearFollowing {
		m.ClearFollowing()
	}
	if v := i.AddFollowingIDs; len(v) > 0 {
		m.AddFollowingIDs(v...)
	}
	if v := i.RemoveFollowingIDs; len(v) > 0 {
		m.RemoveFollowingIDs(v...)
	}
	if i.ClearLikes {
		m.ClearLikes()
	}
	if v := i.AddLikeIDs; len(v) > 0 {
		m.AddLikeIDs(v...)
	}
	if v := i.RemoveLikeIDs; len(v) > 0 {
		m.RemoveLikeIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
