// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateLikeInput represents a mutation input for creating likes.
type CreateLikeInput struct {
	UserID     int
	TweetID    int
	PutByID    int
	BelongToID int
}

// Mutate applies the CreateLikeInput on the LikeMutation builder.
func (i *CreateLikeInput) Mutate(m *LikeMutation) {
	m.SetUserID(i.UserID)
	m.SetTweetID(i.TweetID)
	m.SetPutByID(i.PutByID)
	m.SetBelongToID(i.BelongToID)
}

// SetInput applies the change-set in the CreateLikeInput on the LikeCreate builder.
func (c *LikeCreate) SetInput(i CreateLikeInput) *LikeCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateTweetInput represents a mutation input for creating tweets.
type CreateTweetInput struct {
	Text       string
	ParentID   *int
	UserID     int
	CreatedAt  *time.Time
	PostedByID int
	ChildIDs   []int
	ParentIDs  []int
	HaIDs      []int
}

// Mutate applies the CreateTweetInput on the TweetMutation builder.
func (i *CreateTweetInput) Mutate(m *TweetMutation) {
	m.SetText(i.Text)
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	m.SetUserID(i.UserID)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	m.SetPostedByID(i.PostedByID)
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.ParentIDs; len(v) > 0 {
		m.AddParentIDs(v...)
	}
	if v := i.HaIDs; len(v) > 0 {
		m.AddHaIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTweetInput on the TweetCreate builder.
func (c *TweetCreate) SetInput(i CreateTweetInput) *TweetCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name         string
	ScreenName   string
	Email        string
	Password     string
	ProfileImage string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	PostIDs      []int
	FollowerIDs  []int
	FollowingIDs []int
	PutIDs       []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetScreenName(i.ScreenName)
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetProfileImage(i.ProfileImage)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.FollowerIDs; len(v) > 0 {
		m.AddFollowerIDs(v...)
	}
	if v := i.FollowingIDs; len(v) > 0 {
		m.AddFollowingIDs(v...)
	}
	if v := i.PutIDs; len(v) > 0 {
		m.AddPutIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}
