// Code generated by ent, DO NOT EDIT.

package like

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the like type in the database.
	Label = "like"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTweetID holds the string denoting the tweet_id field in the database.
	FieldTweetID = "tweet_id"
	// EdgePutBy holds the string denoting the put_by edge name in mutations.
	EdgePutBy = "put_by"
	// EdgeBelongTo holds the string denoting the belong_to edge name in mutations.
	EdgeBelongTo = "belong_to"
	// Table holds the table name of the like in the database.
	Table = "likes"
	// PutByTable is the table that holds the put_by relation/edge.
	PutByTable = "likes"
	// PutByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PutByInverseTable = "users"
	// PutByColumn is the table column denoting the put_by relation/edge.
	PutByColumn = "user_likes"
	// BelongToTable is the table that holds the belong_to relation/edge.
	BelongToTable = "likes"
	// BelongToInverseTable is the table name for the Tweet entity.
	// It exists in this package in order to avoid circular dependency with the "tweet" package.
	BelongToInverseTable = "tweets"
	// BelongToColumn is the table column denoting the belong_to relation/edge.
	BelongToColumn = "tweet_has"
)

// Columns holds all SQL columns for like fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldTweetID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "likes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tweet_has",
	"user_likes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Like queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTweetID orders the results by the tweet_id field.
func ByTweetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTweetID, opts...).ToFunc()
}

// ByPutByField orders the results by put_by field.
func ByPutByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPutByStep(), sql.OrderByField(field, opts...))
	}
}

// ByBelongToField orders the results by belong_to field.
func ByBelongToField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBelongToStep(), sql.OrderByField(field, opts...))
	}
}
func newPutByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PutByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PutByTable, PutByColumn),
	)
}
func newBelongToStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BelongToInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BelongToTable, BelongToColumn),
	)
}
