// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (t *Tweet) PostedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.PostedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryPostedBy().Only(ctx)
	}
	return result, err
}

func (t *Tweet) Children(ctx context.Context) (result []*Tweet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryChildren().All(ctx)
	}
	return result, err
}

func (t *Tweet) Parent(ctx context.Context) (*Tweet, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tweet) LikedBy(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedLikedBy(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.LikedByOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryLikedBy().All(ctx)
	}
	return result, err
}

func (u *User) Posts(ctx context.Context) (result []*Tweet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPosts().All(ctx)
	}
	return result, err
}

func (u *User) Followers(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFollowers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FollowersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFollowers().All(ctx)
	}
	return result, err
}

func (u *User) Following(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFollowing(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FollowingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFollowing().All(ctx)
	}
	return result, err
}

func (u *User) Likes(ctx context.Context) (result []*Tweet, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedLikes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.LikesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryLikes().All(ctx)
	}
	return result, err
}
