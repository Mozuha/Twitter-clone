// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (t *Tweet) PostedBy(ctx context.Context) (*User, error) {
	result, err := t.Edges.PostedByOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryPostedBy().Only(ctx)
	}
	return result, err
}

func (t *Tweet) Children(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TweetOrder, where *TweetWhereInput,
) (*TweetConnection, error) {
	opts := []TweetPaginateOption{
		WithTweetOrder(orderBy),
		WithTweetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[1][alias]
	if nodes, err := t.NamedChildren(alias); err == nil || hasTotalCount {
		pager, err := newTweetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TweetConnection{Edges: []*TweetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryChildren().Paginate(ctx, after, first, before, last, opts...)
}

func (t *Tweet) Parent(ctx context.Context) (*Tweet, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tweet) LikedBy(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := t.Edges.totalCount[3][alias]
	if nodes, err := t.NamedLikedBy(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return t.QueryLikedBy().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Posts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TweetOrder, where *TweetWhereInput,
) (*TweetConnection, error) {
	opts := []TweetPaginateOption{
		WithTweetOrder(orderBy),
		WithTweetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedPosts(alias); err == nil || hasTotalCount {
		pager, err := newTweetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TweetConnection{Edges: []*TweetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryPosts().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Followers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedFollowers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryFollowers().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Following(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFollowing(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FollowingOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFollowing().All(ctx)
	}
	return result, err
}

func (u *User) Likes(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *TweetOrder, where *TweetWhereInput,
) (*TweetConnection, error) {
	opts := []TweetPaginateOption{
		WithTweetOrder(orderBy),
		WithTweetFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[3][alias]
	if nodes, err := u.NamedLikes(alias); err == nil || hasTotalCount {
		pager, err := newTweetPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TweetConnection{Edges: []*TweetEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryLikes().Paginate(ctx, after, first, before, last, opts...)
}
