// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/like"
	"app/ent/predicate"
	"app/ent/tweet"
	"app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TweetUpdate is the builder for updating Tweet entities.
type TweetUpdate struct {
	config
	hooks    []Hook
	mutation *TweetMutation
}

// Where appends a list predicates to the TweetUpdate builder.
func (tu *TweetUpdate) Where(ps ...predicate.Tweet) *TweetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetText sets the "text" field.
func (tu *TweetUpdate) SetText(s string) *TweetUpdate {
	tu.mutation.SetText(s)
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TweetUpdate) SetParentID(i int) *TweetUpdate {
	tu.mutation.ResetParentID()
	tu.mutation.SetParentID(i)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableParentID(i *int) *TweetUpdate {
	if i != nil {
		tu.SetParentID(*i)
	}
	return tu
}

// AddParentID adds i to the "parent_id" field.
func (tu *TweetUpdate) AddParentID(i int) *TweetUpdate {
	tu.mutation.AddParentID(i)
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TweetUpdate) ClearParentID() *TweetUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TweetUpdate) SetUserID(i int) *TweetUpdate {
	tu.mutation.ResetUserID()
	tu.mutation.SetUserID(i)
	return tu
}

// AddUserID adds i to the "user_id" field.
func (tu *TweetUpdate) AddUserID(i int) *TweetUpdate {
	tu.mutation.AddUserID(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TweetUpdate) SetCreatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableCreatedAt(t *time.Time) *TweetUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetPostedByID sets the "posted_by" edge to the User entity by ID.
func (tu *TweetUpdate) SetPostedByID(id int) *TweetUpdate {
	tu.mutation.SetPostedByID(id)
	return tu
}

// SetPostedBy sets the "posted_by" edge to the User entity.
func (tu *TweetUpdate) SetPostedBy(u *User) *TweetUpdate {
	return tu.SetPostedByID(u.ID)
}

// AddChildIDs adds the "child" edge to the Tweet entity by IDs.
func (tu *TweetUpdate) AddChildIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddChildIDs(ids...)
	return tu
}

// AddChild adds the "child" edges to the Tweet entity.
func (tu *TweetUpdate) AddChild(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the Tweet entity by IDs.
func (tu *TweetUpdate) AddParentIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddParentIDs(ids...)
	return tu
}

// AddParent adds the "parent" edges to the Tweet entity.
func (tu *TweetUpdate) AddParent(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddParentIDs(ids...)
}

// AddHaIDs adds the "has" edge to the Like entity by IDs.
func (tu *TweetUpdate) AddHaIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddHaIDs(ids...)
	return tu
}

// AddHas adds the "has" edges to the Like entity.
func (tu *TweetUpdate) AddHas(l ...*Like) *TweetUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddHaIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tu *TweetUpdate) Mutation() *TweetMutation {
	return tu.mutation
}

// ClearPostedBy clears the "posted_by" edge to the User entity.
func (tu *TweetUpdate) ClearPostedBy() *TweetUpdate {
	tu.mutation.ClearPostedBy()
	return tu
}

// ClearChild clears all "child" edges to the Tweet entity.
func (tu *TweetUpdate) ClearChild() *TweetUpdate {
	tu.mutation.ClearChild()
	return tu
}

// RemoveChildIDs removes the "child" edge to Tweet entities by IDs.
func (tu *TweetUpdate) RemoveChildIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveChildIDs(ids...)
	return tu
}

// RemoveChild removes "child" edges to Tweet entities.
func (tu *TweetUpdate) RemoveChild(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the Tweet entity.
func (tu *TweetUpdate) ClearParent() *TweetUpdate {
	tu.mutation.ClearParent()
	return tu
}

// RemoveParentIDs removes the "parent" edge to Tweet entities by IDs.
func (tu *TweetUpdate) RemoveParentIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveParentIDs(ids...)
	return tu
}

// RemoveParent removes "parent" edges to Tweet entities.
func (tu *TweetUpdate) RemoveParent(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveParentIDs(ids...)
}

// ClearHas clears all "has" edges to the Like entity.
func (tu *TweetUpdate) ClearHas() *TweetUpdate {
	tu.mutation.ClearHas()
	return tu
}

// RemoveHaIDs removes the "has" edge to Like entities by IDs.
func (tu *TweetUpdate) RemoveHaIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveHaIDs(ids...)
	return tu
}

// RemoveHas removes "has" edges to Like entities.
func (tu *TweetUpdate) RemoveHas(l ...*Like) *TweetUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveHaIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TweetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TweetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TweetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TweetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TweetUpdate) check() error {
	if v, ok := tu.mutation.Text(); ok {
		if err := tweet.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Tweet.text": %w`, err)}
		}
	}
	if _, ok := tu.mutation.PostedByID(); tu.mutation.PostedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tweet.posted_by"`)
	}
	return nil
}

func (tu *TweetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Text(); ok {
		_spec.SetField(tweet.FieldText, field.TypeString, value)
	}
	if value, ok := tu.mutation.ParentID(); ok {
		_spec.SetField(tweet.FieldParentID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedParentID(); ok {
		_spec.AddField(tweet.FieldParentID, field.TypeInt, value)
	}
	if tu.mutation.ParentIDCleared() {
		_spec.ClearField(tweet.FieldParentID, field.TypeInt)
	}
	if value, ok := tu.mutation.UserID(); ok {
		_spec.SetField(tweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedUserID(); ok {
		_spec.AddField(tweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.PostedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.PostedByTable,
			Columns: []string{tweet.PostedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PostedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.PostedByTable,
			Columns: []string{tweet.PostedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChildIDs(); len(nodes) > 0 && !tu.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedParentIDs(); len(nodes) > 0 && !tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHasIDs(); len(nodes) > 0 && !tu.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TweetUpdateOne is the builder for updating a single Tweet entity.
type TweetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetMutation
}

// SetText sets the "text" field.
func (tuo *TweetUpdateOne) SetText(s string) *TweetUpdateOne {
	tuo.mutation.SetText(s)
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TweetUpdateOne) SetParentID(i int) *TweetUpdateOne {
	tuo.mutation.ResetParentID()
	tuo.mutation.SetParentID(i)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableParentID(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetParentID(*i)
	}
	return tuo
}

// AddParentID adds i to the "parent_id" field.
func (tuo *TweetUpdateOne) AddParentID(i int) *TweetUpdateOne {
	tuo.mutation.AddParentID(i)
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TweetUpdateOne) ClearParentID() *TweetUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TweetUpdateOne) SetUserID(i int) *TweetUpdateOne {
	tuo.mutation.ResetUserID()
	tuo.mutation.SetUserID(i)
	return tuo
}

// AddUserID adds i to the "user_id" field.
func (tuo *TweetUpdateOne) AddUserID(i int) *TweetUpdateOne {
	tuo.mutation.AddUserID(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TweetUpdateOne) SetCreatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableCreatedAt(t *time.Time) *TweetUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetPostedByID sets the "posted_by" edge to the User entity by ID.
func (tuo *TweetUpdateOne) SetPostedByID(id int) *TweetUpdateOne {
	tuo.mutation.SetPostedByID(id)
	return tuo
}

// SetPostedBy sets the "posted_by" edge to the User entity.
func (tuo *TweetUpdateOne) SetPostedBy(u *User) *TweetUpdateOne {
	return tuo.SetPostedByID(u.ID)
}

// AddChildIDs adds the "child" edge to the Tweet entity by IDs.
func (tuo *TweetUpdateOne) AddChildIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddChildIDs(ids...)
	return tuo
}

// AddChild adds the "child" edges to the Tweet entity.
func (tuo *TweetUpdateOne) AddChild(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddChildIDs(ids...)
}

// AddParentIDs adds the "parent" edge to the Tweet entity by IDs.
func (tuo *TweetUpdateOne) AddParentIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddParentIDs(ids...)
	return tuo
}

// AddParent adds the "parent" edges to the Tweet entity.
func (tuo *TweetUpdateOne) AddParent(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddParentIDs(ids...)
}

// AddHaIDs adds the "has" edge to the Like entity by IDs.
func (tuo *TweetUpdateOne) AddHaIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddHaIDs(ids...)
	return tuo
}

// AddHas adds the "has" edges to the Like entity.
func (tuo *TweetUpdateOne) AddHas(l ...*Like) *TweetUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddHaIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tuo *TweetUpdateOne) Mutation() *TweetMutation {
	return tuo.mutation
}

// ClearPostedBy clears the "posted_by" edge to the User entity.
func (tuo *TweetUpdateOne) ClearPostedBy() *TweetUpdateOne {
	tuo.mutation.ClearPostedBy()
	return tuo
}

// ClearChild clears all "child" edges to the Tweet entity.
func (tuo *TweetUpdateOne) ClearChild() *TweetUpdateOne {
	tuo.mutation.ClearChild()
	return tuo
}

// RemoveChildIDs removes the "child" edge to Tweet entities by IDs.
func (tuo *TweetUpdateOne) RemoveChildIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveChildIDs(ids...)
	return tuo
}

// RemoveChild removes "child" edges to Tweet entities.
func (tuo *TweetUpdateOne) RemoveChild(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveChildIDs(ids...)
}

// ClearParent clears all "parent" edges to the Tweet entity.
func (tuo *TweetUpdateOne) ClearParent() *TweetUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// RemoveParentIDs removes the "parent" edge to Tweet entities by IDs.
func (tuo *TweetUpdateOne) RemoveParentIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveParentIDs(ids...)
	return tuo
}

// RemoveParent removes "parent" edges to Tweet entities.
func (tuo *TweetUpdateOne) RemoveParent(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveParentIDs(ids...)
}

// ClearHas clears all "has" edges to the Like entity.
func (tuo *TweetUpdateOne) ClearHas() *TweetUpdateOne {
	tuo.mutation.ClearHas()
	return tuo
}

// RemoveHaIDs removes the "has" edge to Like entities by IDs.
func (tuo *TweetUpdateOne) RemoveHaIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveHaIDs(ids...)
	return tuo
}

// RemoveHas removes "has" edges to Like entities.
func (tuo *TweetUpdateOne) RemoveHas(l ...*Like) *TweetUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveHaIDs(ids...)
}

// Where appends a list predicates to the TweetUpdate builder.
func (tuo *TweetUpdateOne) Where(ps ...predicate.Tweet) *TweetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TweetUpdateOne) Select(field string, fields ...string) *TweetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tweet entity.
func (tuo *TweetUpdateOne) Save(ctx context.Context) (*Tweet, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TweetUpdateOne) SaveX(ctx context.Context) *Tweet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TweetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TweetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TweetUpdateOne) check() error {
	if v, ok := tuo.mutation.Text(); ok {
		if err := tweet.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Tweet.text": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.PostedByID(); tuo.mutation.PostedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Tweet.posted_by"`)
	}
	return nil
}

func (tuo *TweetUpdateOne) sqlSave(ctx context.Context) (_node *Tweet, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tweet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tweet.FieldID)
		for _, f := range fields {
			if !tweet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tweet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Text(); ok {
		_spec.SetField(tweet.FieldText, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ParentID(); ok {
		_spec.SetField(tweet.FieldParentID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedParentID(); ok {
		_spec.AddField(tweet.FieldParentID, field.TypeInt, value)
	}
	if tuo.mutation.ParentIDCleared() {
		_spec.ClearField(tweet.FieldParentID, field.TypeInt)
	}
	if value, ok := tuo.mutation.UserID(); ok {
		_spec.SetField(tweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedUserID(); ok {
		_spec.AddField(tweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.PostedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.PostedByTable,
			Columns: []string{tweet.PostedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PostedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.PostedByTable,
			Columns: []string{tweet.PostedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChildIDs(); len(nodes) > 0 && !tuo.mutation.ChildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.ChildTable,
			Columns: tweet.ChildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: tweet.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHasIDs(); len(nodes) > 0 && !tuo.mutation.HasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.HasTable,
			Columns: []string{tweet.HasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tweet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
