// Code generated by ent, DO NOT EDIT.

package tweet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tweet type in the database.
	Label = "tweet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePostedBy holds the string denoting the posted_by edge name in mutations.
	EdgePostedBy = "posted_by"
	// EdgeChild holds the string denoting the child edge name in mutations.
	EdgeChild = "child"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeHas holds the string denoting the has edge name in mutations.
	EdgeHas = "has"
	// Table holds the table name of the tweet in the database.
	Table = "tweets"
	// PostedByTable is the table that holds the posted_by relation/edge.
	PostedByTable = "tweets"
	// PostedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PostedByInverseTable = "users"
	// PostedByColumn is the table column denoting the posted_by relation/edge.
	PostedByColumn = "user_tweets"
	// ChildTable is the table that holds the child relation/edge. The primary key declared below.
	ChildTable = "tweet_parent"
	// ParentTable is the table that holds the parent relation/edge. The primary key declared below.
	ParentTable = "tweet_parent"
	// HasTable is the table that holds the has relation/edge.
	HasTable = "likes"
	// HasInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	HasInverseTable = "likes"
	// HasColumn is the table column denoting the has relation/edge.
	HasColumn = "tweet_has"
)

// Columns holds all SQL columns for tweet fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldParentID,
	FieldUserID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tweets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tweets",
}

var (
	// ChildPrimaryKey and ChildColumn2 are the table columns denoting the
	// primary key for the child relation (M2M).
	ChildPrimaryKey = []string{"tweet_id", "child_id"}
	// ParentPrimaryKey and ParentColumn2 are the table columns denoting the
	// primary key for the parent relation (M2M).
	ParentPrimaryKey = []string{"tweet_id", "child_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Tweet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByPostedByField orders the results by posted_by field.
func ByPostedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildCount orders the results by child count.
func ByChildCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildStep(), opts...)
	}
}

// ByChild orders the results by child terms.
func ByChild(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentCount orders the results by parent count.
func ByParentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newParentStep(), opts...)
	}
}

// ByParent orders the results by parent terms.
func ByParent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHasCount orders the results by has count.
func ByHasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHasStep(), opts...)
	}
}

// ByHas orders the results by has terms.
func ByHas(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostedByTable, PostedByColumn),
	)
}
func newChildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ChildTable, ChildPrimaryKey...),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ParentTable, ParentPrimaryKey...),
	)
}
func newHasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HasTable, HasColumn),
	)
}
