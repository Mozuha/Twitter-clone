package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"app"
	"app/ent"
	"app/gql/generated"
	"app/middlewares"
	"context"
)

// CreateUser is the resolver for the createUser field.
// This is for public usage upon signup
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return r.srv.CreateUser(ctx, input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	if err := middlewares.CheckIsAuthedFromCtx(ctx); err != nil {
		return nil, err
	} else {
		return r.srv.UpdateUserById(ctx, id, input)
	}
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (*bool, error) {
	if err := middlewares.CheckIsAuthedFromCtx(ctx); err != nil {
		return nil, err
	} else {
		return r.srv.DeleteUserById(ctx, id)
	}
}

// CreateTweet is the resolver for the createTweet field.
func (r *mutationResolver) CreateTweet(ctx context.Context, input ent.CreateTweetInput) (*ent.Tweet, error) {
	if err := middlewares.CheckIsAuthedFromCtx(ctx); err != nil {
		return nil, err
	} else {
		return r.srv.CreateTweet(ctx, input)
	}
}

// DeleteTweet is the resolver for the deleteTweet field.
func (r *mutationResolver) DeleteTweet(ctx context.Context, id int) (*bool, error) {
	if err := middlewares.CheckIsAuthedFromCtx(ctx); err != nil {
		return nil, err
	} else {
		return r.srv.DeleteTweetById(ctx, id)
	}
}

// Signin is the resolver for the signin field.
// This is for public usage
func (r *mutationResolver) Signin(ctx context.Context, email string, password string) (*app.SigninResponse, error) {
	return r.srv.Signin(ctx, email, password)
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, refreshToken string) (string, error) {
	return r.srv.RefreshToken(ctx, refreshToken)
}

// EmailExists is the resolver for the emailExists field.
// This is for public usage upon signup
func (r *queryResolver) EmailExists(ctx context.Context, email string) (*bool, error) {
	return r.srv.CheckEmailExists(ctx, email)
}

// ScreenNameExists is the resolver for the screenNameExists field.
// This is for public usage upon signup
func (r *queryResolver) ScreenNameExists(ctx context.Context, screenName string) (*bool, error) {
	return r.srv.CheckScreenNameExists(ctx, screenName)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
