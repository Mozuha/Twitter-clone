directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateTweetInput is used for create Tweet object.
Input was generated by ent.
"""
input CreateTweetInput {
  text: String!
  createdAt: Time
  postedByID: ID!
  childIDs: [ID!]
  parentID: ID
  likedByIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  screenName: String!
  email: String!
  password: String!
  profileImage: String
  createdAt: Time
  updatedAt: Time
  postIDs: [ID!]
  followerIDs: [ID!]
  followingIDs: [ID!]
  likeIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "app/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  tweets: [Tweet!]!
  users: [User!]!
}
"""The builtin Time type"""
scalar Time
type Tweet implements Node {
  id: ID!
  text: String!
  createdAt: Time!
  postedBy: User!
  children: [Tweet!]
  parent: Tweet
  likedBy: [User!]
}
"""Ordering options for Tweet connections"""
input TweetOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tweets."""
  field: TweetOrderField!
}
"""Properties by which Tweet connections can be ordered."""
enum TweetOrderField {
  CREATED_AT
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  screenName: String
  email: String
  password: String
  profileImage: String
  updatedAt: Time
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addFollowerIDs: [ID!]
  removeFollowerIDs: [ID!]
  clearFollowers: Boolean
  addFollowingIDs: [ID!]
  removeFollowingIDs: [ID!]
  clearFollowing: Boolean
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  clearLikes: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  screenName: String!
  email: String!
  profileImage: String!
  createdAt: Time!
  updatedAt: Time!
  posts: [Tweet!]
  followers: [User!]
  following: [User!]
  likes: [Tweet!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  NAME
  SCREEN_NAME
  CREATED_AT
  UPDATED_AT
}
