"""
CreateTweetInput is used for create Tweet object.
Input was generated by ent.
"""
input CreateTweetInput {
  text: String!
  createdAt: Time
  postedByID: ID!
  childIDs: [ID!]
  parentID: ID
  likedByIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  screenName: String!
  email: String!
  password: String!
  profileImage: String
  createdAt: Time
  updatedAt: Time
  postIDs: [ID!]
  followerIDs: [ID!]
  followingIDs: [ID!]
  likeIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  tweets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tweets returned from the connection.
    """
    orderBy: TweetOrder

    """
    Filtering options for Tweets returned from the connection.
    """
    where: TweetWhereInput
  ): TweetConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
The builtin Time type
"""
scalar Time
type Tweet implements Node {
  id: ID!
  text: String!
  createdAt: Time!
  postedBy: User!
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tweets returned from the connection.
    """
    orderBy: TweetOrder

    """
    Filtering options for Tweets returned from the connection.
    """
    where: TweetWhereInput
  ): TweetConnection!
  parent: Tweet
  likedBy(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
"""
A connection to a list of items.
"""
type TweetConnection {
  """
  A list of edges.
  """
  edges: [TweetEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TweetEdge {
  """
  The item at the end of the edge.
  """
  node: Tweet
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tweet connections
"""
input TweetOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tweets.
  """
  field: TweetOrderField!
}
"""
Properties by which Tweet connections can be ordered.
"""
enum TweetOrderField {
  CREATED_AT
}
"""
TweetWhereInput is used for filtering Tweet objects.
Input was generated by ent.
"""
input TweetWhereInput {
  not: TweetWhereInput
  and: [TweetWhereInput!]
  or: [TweetWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  posted_by edge predicates
  """
  hasPostedBy: Boolean
  hasPostedByWith: [UserWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [TweetWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TweetWhereInput!]
  """
  liked_by edge predicates
  """
  hasLikedBy: Boolean
  hasLikedByWith: [UserWhereInput!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  screenName: String
  email: String
  password: String
  profileImage: String
  updatedAt: Time
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addFollowerIDs: [ID!]
  removeFollowerIDs: [ID!]
  clearFollowers: Boolean
  addFollowingIDs: [ID!]
  removeFollowingIDs: [ID!]
  clearFollowing: Boolean
  addLikeIDs: [ID!]
  removeLikeIDs: [ID!]
  clearLikes: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  screenName: String!
  email: String!
  profileImage: String!
  createdAt: Time!
  updatedAt: Time!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tweets returned from the connection.
    """
    orderBy: TweetOrder

    """
    Filtering options for Tweets returned from the connection.
    """
    where: TweetWhereInput
  ): TweetConnection!
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  following: [User!]
  likes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tweets returned from the connection.
    """
    orderBy: TweetOrder

    """
    Filtering options for Tweets returned from the connection.
    """
    where: TweetWhereInput
  ): TweetConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  NAME
  SCREEN_NAME
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  screen_name field predicates
  """
  screenName: String
  screenNameNEQ: String
  screenNameIn: [String!]
  screenNameNotIn: [String!]
  screenNameGT: String
  screenNameGTE: String
  screenNameLT: String
  screenNameLTE: String
  screenNameContains: String
  screenNameHasPrefix: String
  screenNameHasSuffix: String
  screenNameEqualFold: String
  screenNameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  profile_image field predicates
  """
  profileImage: String
  profileImageNEQ: String
  profileImageIn: [String!]
  profileImageNotIn: [String!]
  profileImageGT: String
  profileImageGTE: String
  profileImageLT: String
  profileImageLTE: String
  profileImageContains: String
  profileImageHasPrefix: String
  profileImageHasSuffix: String
  profileImageEqualFold: String
  profileImageContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [TweetWhereInput!]
  """
  followers edge predicates
  """
  hasFollowers: Boolean
  hasFollowersWith: [UserWhereInput!]
  """
  following edge predicates
  """
  hasFollowing: Boolean
  hasFollowingWith: [UserWhereInput!]
  """
  likes edge predicates
  """
  hasLikes: Boolean
  hasLikesWith: [TweetWhereInput!]
}
